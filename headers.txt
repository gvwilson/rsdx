## 01_intro

tagline: "An overview of where we're going and why."
abstract: >
    The best way to learn design is to study examples,
    and the best programs to use as examples
    are ones like those you want to create.
    These lessons therefore build small versions
    of tools that research software engineers build and use every day
    to show how experienced software designers think.
syllabus:
-   Assume you know how to program.
-   Want to learn how to design pieces of software that are reliable and reusable.
-   "Best way is through examples: principles don't make sense unless you know how to translate them into specifics."

## 02_parse

tagline: "Turning messy data files into something we can process more easily."
abstract: >
    Research data is often stored in idiosyncratic formats,
    or must be extracted from documents that were written for people to read
    rather than for machines to process.
    Our first lesson therefore shows
    how to build a parser that can handle
    several variations of a single data format
    and how to write command-line tools that respect [Taschuk's Rules][taschuk].
syllabus:
-   Writing command-line tools that respect Taschuk's Rules.
-   Creating a data manifest (and why you want one).
-   Using regular expressions if you have to, but an out-of-the-box parser if one is available.

## 03_plugin

tagline: "Find the center point of each polluted region and visualize it."
abstract: >
    Research data may come from files, databases, websites, and many other sources.
    Instead of rewriting a program each time a new source becomes available,
    we can build a plugin architecture that loads data handlers dynamically
    so that users can extend our program without modifying its internals.
    Doing this gives us an opportunity to look at how to query a SQL database
    and at the problem of testing visualizations.
syllabus:
-   Using a plugin architecture to load modules dynamically.
-   Finding, installing, and figuring out how to use open source packages.
-   Use geopy to handle geocoded data.
-   Plotting (and the challenge of testing visualization code).
-   Connecting to a database from Python.
-   Embedding SQL queries in Python and reading results.
-   Creating classes with SQLModel ORM to mirror database tables.
-   Writing queries in Python rather than as embedded SQL strings.
-   Cross-validating implementations.
-   Big benefit of ORM is avoiding transposition errors with integer values.

## 04_cleanup

tagline: "Refactor and test a script that models the spread of pollution."
abstract: >
    Computational notebooks are great for exploratory work,
    but research software engineers must also be able to create
    software libraries that can be re-mixed and re-used.
    This lesson therefore refactors a script
    that uses invasion percolation to simulate to model the spread of pollution
    and introduces several tools that can make testing research software easier,
    including the use of mock objects to make randomness less random
    and the use of coverage tools to determine
    what is and isn't being tested.
syllabus:
-   Break code into comprehensible chunks.
-   Create classes and class hierarchies.
-   Write docstrings and generating documentation pages.
-   Validate implementations against one another.
-   A quick review of pytest.
-   Deciding what tests to write.
-   Creating and using mock objects.
-   Making "random" reproducible.
-   Using coverage to determine what is and isn't being tested.

## 05_perf

tagline: "Compare grid implementations empirically."
abstract: >
    Some pieces of research software have to be fast in order to be useful.
    This lesson therefore explores
    how to capture program parameters in reproducible ways,
    how profiling can help us figure out which parts of our program are worth optimizing,
    and how being lazy can make programs faster.
syllabus:
-   Introduce Python type annotations.
-   Define dataclasses to represent parameters for profiling runs.
-   Using cProfile to determine which parts are expensive.
-   Tuning code does not solve algorithmic problems like quadratic growth in runtime.
-   Estimating algorithm performance with big-oh.
-   Extending a class hierarchy to accommodate new features.
-   Adapting tools written earlier to make all of this simpler to run, test, and document.

## 06_scale

tagline: "Generate fractals using a workflow runner."
abstract: >
    Once we have an algorithm that's worth scaling up,
    we need to actually scale it up.
    This lesson shows how to describe a workflow as an acyclic graph,
    how to express that workflow in code to take advantage of cloud computing.
syllabus:
-   Describing workflows as directed acyclic graphs.
-   Expressing DAGs in code with Metaflow.

## 07_prod

tagline: "Make the application production-ready."
abstract: >
    FIXME
syllabus:
-   FIXME

## 08_mutate

tagline: "Analyze snail genomes to see if a single mutation accounts for size differences."
abstract: >
    In this lesson we pivot from simulation to data analysis
    and build a simple pipeline to find out whether
    a single nucleotide polymorphism can explain differences in
    the sizes of snails in polluted regions.
    We also build a synthetic data generator to help us test our analysis pipeline,
    and use it to show how data analyses can be tested more generally.
syllabus:
-   Use a statistical model of single nucleotide polymorphisms (SNPs) to synthesize genomic data.
-   Use another model to combine that data with geocoded samples to generate snail sizes.
-   Build a program to analyze and visualize the synthetic data to test the analysis pipeline.

## 09_search

tagline: "Build a simple search engine for bibliography abstracts."
abstract: >
    Information is only useful if it can be found,
    and how we search determines what we find.
    This lesson shows how to build a simple search engine
    using a technique called term frequency-inverse document frequency
    or [TF-IDF][tf_idf].
syllabus:
-   Create a table of term occurrences and calculate TF-IDF scores to support search.
-   Caching the lookup index rather than recalculating it on the fly.
-   Handling different character sets.
-   How the way we clean our data determines the results we get.

## 10_lims

tagline: "Ingest, manage, and summarize experimental data."
abstract: >
    Every modern lab uses [Electronic Lab Notebooks][eln] (ELNs)
    to keep track of procedures, experiments, results, and analyses
    and a [Laboratory Information Management System][lims] (LIMS)
    to share information among team members.
    This lesson shows how a LIMS works by building
    a command-line application to store, query, update, and invalidate experimental data.
syllabus:
-   Check the existence, structure, content, and consistency of data in that order.
-   Separate quality control checks from reports.
-   Use models, views, and controllers to build interactive applications.
-   Never pass user data directly in a database query.

## 11_site

tagline: "Build a static web site to display research results."
abstract: >
    Sharing knowledge is as much a part of research as
    asking good questions and getting correct answers.
    This lesson therefore shows how to use a static site generator
    to create a website that displays research findings,
    and how to extend such a tool to handle
    the idiosyncratic needs of a particular research project.
syllabus:
-   How page templates are expanded.
-   Using configuration data in a site.
-   More about Jinja templates.
-   Adding extensions to Ark to display scientific data.
-   Figuring out how to build extensions for third-party software.

## 12_scrape

tagline: "Pull data from web pages using requests and Beautiful Soup."
abstract: >
    Some researchers make their data easy to access and use,
    but in many other cases,
    the only way to get information is to scrape it off the web.
    This lesson therefore explains how the web's basic protocols work,
    how web pages are represented inside programs,
    and how to build a tool that can extract information from someone else's HTML.
syllabus:
-   How HTTP requests work.
-   Using requests to fetch web pages.
-   How HTML is represented as DOM.
-   Using Beautiful Soup to parse HTML.
-   Using query selectors to find elements in DOM.

## 13_serve

tagline: "Build a small web server to display plate data."
abstract: >
    As a counterpart to the previous lesson,
    this one shows how web servers handle requests and generate dynamic HTML pages.
    Understanding how this works will help research software engineers
    design services of their own
    and debug them when things go wrong.
syllabus:
-   Routing HTTP requests to functions.
-   Separating routing from model.
-   Creating HTML pages from Jinja templates.
-   Serving static files (and what that means).
-   The difference between data as HTML and data for machine consumption.

## 14_finale

tagline: "What we've covered and where readers might like to go next."
abstract: >
    Software is usually critiqued by asking
    if it does what it's supposed to do and if it's pleasurable to use.
    What is often missing is discussion of
    whether its design makes it easy to manufacture, test, and maintain.
    We hope these lessons will help you ask and answer that question
    about the things you build.
syllabus:
-   Start where you are, used what you have, help who you can.
