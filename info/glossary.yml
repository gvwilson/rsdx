# 1

# A

- key: abc
  en:
    term: "abstract base class"
    def: >
      FIXME

- key: actual_result
  en:
    term: "actual result (of test)"
    def: >
      The value generated by running code in a test. If this matches the
      [expected result](#expected_result), the test [passes](#pass_test); if the
      two are different, the test [fails](#fail_test).

# B

- key: boilerplate
  en:
    term: "boilerplate"
    def: >
      FIXME

- key: boxing
  en:
    term: "boxing (a value)"
    def: >
      FIXME

# C

- key: cognitive_load
  en:
    term: "cognitive load"
    def: >
      The mental effort required to solve a problem.

- key: contract
  en:
    term: "contract"
    def: >
      FIXME

- key: cross_validation
  en:
    term: "cross validation"
    def: >
      FIXME

# D

# E

- key: error_test
  en:
    term: "error (result of test)"
    def: >
      Signalled when something goes wrong in a [unit test](#unit_test) itself
      rather than in the system being tested. In this case, we do not know
      anything about the correctness of the system.

- key: expected_result
  en:
    term: "expected result (of test)"
    def: >
      The value that a piece of software is supposed to produce when tested in a
      certain way, or the state in which it is supposed to leave the system.

# F

- key: fail_test
  en:
    term: "failure (result of test)"
    def: >
      A test fails if the [actual result](#actual_result) does not match the
      [expected result](#expected_result).

# G

- key: generator
  en:
    term: "generator"
    def: >
      FIXME

# H

# I

- key: inv_perc
  en:
    term: "invasion percolation"
    def: >
      FIXME

# J

# K

# L

# M

- key: mock_object
  en:
    term: "mock object"
    def: >
      A simplified replacement for part of a program whose behavior is easy to
      control and predict. Mock objects are used in [unit tests](#unit_test) to
      simulate databases, web services, and other complex systems.

# N

# O

- key: orm
  en:
    term: "object-relational mapper"
    acronym: ORM
    def: >
      FIXME

# P

- key: parameter_sweeping
  en:
    term: "parameter sweeping"
    def: >
      FIXME

- key: parameterize_test
  en:
    term: "parameterize (a test)"
    def: >
      FIXME

- key: pass_test
  en:
    term: "pass (result of test)"
    def: >
      A test passes if the [actual result](#actual_result) matches the [expected
      result](#expected_result).

- key: plugin_architecture
  en:
    term: "plugin architecture"
    def: >
      FIXME

- key: profiler
  en:
    term: "profiler"
    def: >
      FIXME

# Q

# R

- key: rng_seed
  en:
    term: "random number generation seed"
    def: >
      FIXME

# S

- key: semver
  en:
    term: "semantic versioning"
    def: >
      FIXME

- key: snp
  en:
    term: "single nucleotide polymorphism"
    def: >
      The replacement of the usual or standard base at one location in a gene sequence
      with another base.

- key: spread
  en:
    term: "spread"
    def: >
      To automatically match the values from a list or dictionary supplied by the caller
      to the parameters of a function.

- key: synth_data
  en:
    term: "synthetic data generator"
    def: >
      A tool that creates data with the same properties as real data,
      usually for testing purposes.

# T

- key: toml
  en:
    term: "TOML"
    def: >
      "Tom's Own Minimal Language" is yet another format for configuration files.

- key: type_annotation
  en:
    term: "type annotation"
    def: >
      FIXME

# U

- key: unboxing
  en:
    term: "unboxing (a value)"
    def: >
      FIXME

- key: unit_test
  en:
    term: "unit test"
    def: >
      A test that exercises one function or feature of a piece of software and
      produces [pass](#pass_test), [fail](#fail_test), or [error](#error_test).

# V

# W

- key: workflow
  en:
    term: "workflow"
    def: >
      FIXME

# X

# Y

# Z
